#!/bin/bash

# CONFIG
NAME=${PWD##*/}
CONTAINER="${NAME}-container"
IMAGE="${NAME}-image"
MOUNT=$NAME

function checkForOutput {
  if [ -z $1 ]; then return 1; fi
  return 0
}

function imageExists {
  checkForOutput $(docker images --quiet $IMAGE)
  return $?
}

function containerExists {
  checkForOutput $(docker ps --all --quiet --filter "name=$CONTAINER")
  return $?
}

function containerIsRunning {
  checkForOutput $(docker ps --quiet \
    --filter "name=$CONTAINER" \
    --filter "status=running")
  return $?
}

function buildImage {
  echo "Building $IMAGE"
  docker build --tag $IMAGE $PWD
}

function destroy {
  # check for confirmation from user
  if containerIsRunning; then stopContainer; fi

  if containerExists; then
    echo "Removing $CONTAINER"
    docker rm $CONTAINER
  fi

  if imageExists; then
    echo "Removing $IMAGE"
    docker rmi $IMAGE
  fi
}

function bringContainerUp {
  if ! imageExists; then
    echo "$IMAGE does not exist, attempting to build..."
    buildImage
  fi

  echo "Bringing up $CONTAINER"
  docker run --detach --interactive \
    --volume $PWD:/$MOUNT \
    --name $CONTAINER $IMAGE
}

function startContainer {
  if containerExists; then
    echo "Starting $CONTAINER..."
    docker start $CONTAINER
  else
    echo "$CONTAINER does not exist, attempting to bring up..."
    bringContainerUp
  fi
}

function stopContainer {
  echo "Stopping $CONTAINER"
  docker stop $CONTAINER
}

function terminal {
  if ! containerIsRunning; then startContainer; fi
  echo "Starting a new session in $CONTAINER"
  docker exec \
    -e COLUMNS="`tput cols`" \
    -e LINES="`tput lines`" \
    -it $CONTAINER /bin/zsh
}

function usage {
  echo "This is how to use coast"
}

case "$1" in
  b|build)
    buildImage
    ;;
  r|remove|destroy)
    destroy
    ;;
  u|up|start)
    startContainer
    ;;
  d|down|stop)
    stopContainer
    ;;
  o|t|open|term|terminal|session)
    terminal
    ;;
  *)
    usage
    ;;
esac
