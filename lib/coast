#!/bin/bash

# CONFIG
ROOT=$( cd ${BASH_SOURCE%/*} && pwd )
DOCKERFILE=$ROOT/Dockerfile.coast
NAME=${PWD##*/}
CONTAINER="${NAME}-container"
IMAGE="${NAME}-image"
MOUNT=/$NAME

checkForOutput() {
  if [ -z $1 ]; then return 1; fi
  return 0
}

imageExists() {
  checkForOutput $(docker images --quiet $IMAGE)
  return $?
}

containerExists() {
  checkForOutput $(docker ps --all --quiet --filter "name=$CONTAINER")
  return $?
}

containerIsRunning() {
  checkForOutput $(docker ps --quiet \
    --filter "name=$CONTAINER" \
    --filter "status=running")
  return $?
}

buildImage() {
  echo "Building $IMAGE"
  docker build --tag $IMAGE $PWD
  if [ $? -gt 0 ]; then exit 1; fi
}

confirmDestruction() {
  echo -n "Are you sure you want to destroy $IMAGE and $CONTAINER? [(y)|n]:"
  read confirmation
  case "$confirmation" in
    n|no|N|NO|No)
      echo "Leaving $IMAGE and $CONTAINER as they were"
      exit 1
      ;;
    *)
      performDestruction
      ;;
  esac
}

destroy() {
  case "$1" in
    -f|--force)
      performDestruction
      ;;
    -h|--help)
      destructionUsage
      ;;
    *)
      confirmDestruction
      ;;
  esac
}

performDestruction() {
  if containerIsRunning; then stopContainer; fi

  if containerExists; then
    echo "Removing $CONTAINER"
    docker rm $CONTAINER
  fi

  if imageExists; then
    echo "Removing $IMAGE"
    docker rmi $IMAGE
  fi
}

bringContainerUp() {
  if ! imageExists; then
    echo "$IMAGE does not exist, attempting to build..."
    buildImage
  fi

  echo "Bringing up $CONTAINER"
  docker run --detach --interactive \
    --volume $PWD:$MOUNT \
    --name $CONTAINER $IMAGE
}

startContainer() {
  if containerExists; then
    echo "Starting $CONTAINER..."
    docker start $CONTAINER
  else
    echo "$CONTAINER does not exist, attempting to bring up..."
    bringContainerUp
  fi
}

stopContainer() {
  echo "Stopping $CONTAINER"
  docker stop $CONTAINER
}

buildImageWith() {
  if imageExists; then
    echo "$IMAGE already exists, destroy it before trying to build FROM $1"
    exit 1
  fi

  echo "FROM $1" > $DOCKERFILE
  docker build --tag $IMAGE - < $DOCKERFILE
}

startSession() {
  if [ "$1" = "from" ]; then buildImageWith $2; fi
  if ! containerIsRunning; then startContainer; fi
  echo "Starting a new session on $CONTAINER"
  docker exec --interactive --tty \
    --env COLUMNS="`tput cols`" \
    --env LINES="`tput lines`" \
    --workdir $MOUNT \
    $CONTAINER /bin/zsh
}

destructionUsage() {
  echo "This is how to use coast destroy"
}

usage() {
  echo "This is how to use coast"
}

update() {
  # Check against version?
  echo "Updating..."
  wget -qO- https://raw.github.com/simon-ohara/coast/master/install | bash
}

case "$1" in
  b|build)
    buildImage
    ;;
  r|remove|destroy)
    destroy $2
    ;;
  s|start)
    startContainer
    ;;
  d|down|stop)
    stopContainer
    ;;
  o|t|open|term|terminal|session)
    shift
    startSession $@
    ;;
  u|update)
    update
    ;;
  *)
    usage
    ;;
esac
