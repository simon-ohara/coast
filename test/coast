#!/usr/bin/env bats

ROOT=$BATS_TEST_DIRNAME/..
DATA=$BATS_TMPDIR/data
CONTAINER=coast-container
IMAGE=coast-image
DOCKER_EXIT=0
CONTAINER_RUNNING=0
CONTAINER_EXISTS=0
IMAGE_EXISTS=0


function setup {
  source $ROOT/test/.before
}

function teardown {
  source $ROOT/test/.after
}

function log {
  echo "# LOG: $@" >&3
}

function docker {
  echo "Docker stub called with $@" >&4

  case "$1" in
    ps)
      [[ "$@" = *"status=running" ]] && \
        [[ $CONTAINER_RUNNING -gt 0 ]] && \
        echo "container-running"
      [[ "$@" = *"--all"* ]] && \
        [[ $CONTAINER_EXISTS -gt 0 ]] && \
        echo "container-exists"
      ;;
    images)
      [[ $IMAGE_EXISTS -gt 0 ]] && \
        echo "image-exists"
  esac

  return $DOCKER_EXIT
}

function coast {
  source $ROOT/coast
}

USAGE="This is how to use coast"

@test "no arguments will output the usage text" {
  run coast
  [ "$status" -eq 0 ]
  [ "$output" = "$USAGE" ]
}

@test "unknown arguments will output the usage text" {
  run coast unknown arguments
  [ "$status" -eq 0 ]
  [ "$output" = "$USAGE" ]
}


# build method
@test "build :: uses docker build" {
  run coast build
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [ "${lines[0]}" = "Building $IMAGE" ]
  [[ "${data[0]}" = "Docker stub called with build --tag $IMAGE /coast"* ]]
}

@test "build :: fails if docker build fails" {
  DOCKER_EXIT=1
  run coast build
  [ "$status" -eq $DOCKER_EXIT ]
  DOCKER_EXIT=0
}


# destory method
@test "destroy :: asks the user to confirm destruction" {
  run coast destroy <<< $'y\n'
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Are you sure you want to destroy $IMAGE and $CONTAINER? [(y)|n]:"* ]]
}

@test "destroy :: when the container is running will stop the container" {
  CONTAINER_RUNNING=1
  run coast destroy <<< $'y\n'
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = *"Stopping $CONTAINER" ]]
  [[ "${data[0]}" = *"ps --quiet --filter name=$CONTAINER --filter status=running"* ]]
  [[ "${data[1]}" = "Docker stub called with stop $CONTAINER"* ]]
  CONTAINER_RUNNING=0
}

@test "destroy :: when the container exists will remove the container" {
  CONTAINER_EXISTS=1
  run coast destroy <<< $'y\n'
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = *"Removing $CONTAINER" ]]
  [[ "${data[1]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[2]}" = *"rm $CONTAINER"* ]]
  CONTAINER_EXISTS=0
}

@test "destroy :: when the image exists will remove the image" {
  IMAGE_EXISTS=1
  run coast destroy <<< $'y\n'
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = *"Removing $IMAGE" ]]
  [[ "${data[1]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[2]}" = *"images --quiet $IMAGE"* ]]
  [[ "${data[3]}" = *"rmi $IMAGE"* ]]
  IMAGE_EXISTS=0
}


# start method
@test "start :: when the container exists starts the container" {
  CONTAINER_EXISTS=1
  run coast start
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Starting $CONTAINER..."* ]]
  [[ "${data[0]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[1]}" = *"start $CONTAINER"* ]]
  CONTAINER_EXISTS=0
}

@test "start :: when the container does not exist it is created before it is started" {
  IMAGE_EXISTS=1
  run coast start
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "$CONTAINER does not exist, attempting to bring up..."* ]]
  [[ "${lines[1]}" = "Bringing up $CONTAINER"* ]]
  [[ "${data[0]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[1]}" = *"images --quiet $IMAGE"* ]]
  [[ "${data[2]}" = *"run --detach --interactive --volume $PWD:/coast --name $CONTAINER $IMAGE"* ]]
  IMAGE_EXISTS=0
}

@test "start :: when neither the container or image exist they are created before starting" {
  run coast start
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "$CONTAINER does not exist, attempting to bring up..."* ]]
  [[ "${lines[1]}" = "$IMAGE does not exist, attempting to build..."* ]]
  [[ "${lines[2]}" = "Building $IMAGE"* ]]
  [[ "${lines[3]}" = "Bringing up $CONTAINER"* ]]
  [[ "${data[0]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[1]}" = *"images --quiet $IMAGE"* ]]
  [[ "${data[2]}" = *"build --tag $IMAGE $PWD"* ]]
  [[ "${data[3]}" = *"run --detach --interactive --volume $PWD:/coast --name $CONTAINER $IMAGE"* ]]
}


# stop method
@test "stop :: stops the container" {
  run coast stop
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Stopping $CONTAINER"* ]]
  [[ "${data[0]}" = *"stop $CONTAINER"* ]]
}


# session method
@test "session :: creates an interactive zsh session on the container" {
  CONTAINER_RUNNING=1
  run coast session
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Starting a new session in $CONTAINER"* ]]
  [[ "${data[0]}" = *"ps --quiet --filter name=$CONTAINER --filter status=running"* ]]
  [[ "${data[1]}" = *"exec --interactive --tty"* ]]
  [[ "${data[1]}" = *"--env COLUMNS=`tput cols`"* ]]
  [[ "${data[1]}" = *"--env LINES=`tput lines`"* ]]
  [[ "${data[1]}" = *"--workdir /coast"* ]]
  [[ "${data[1]}" = *"$CONTAINER /bin/zsh"* ]]
  CONTAINER_RUNNING=0
}

@test "session :: when the container is not already running starts it before starting a session" {
  CONTAINER_EXISTS=1
  run coast session
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Starting $CONTAINER..."* ]]
  [[ "${lines[1]}" = "Starting a new session in $CONTAINER"* ]]
  [[ "${data[0]}" = *"ps --quiet --filter name=$CONTAINER --filter status=running"* ]]
  [[ "${data[1]}" = *"ps --all --quiet --filter name=$CONTAINER"* ]]
  [[ "${data[2]}" = *"start $CONTAINER"* ]]
  [[ "${data[3]}" = *"exec --interactive --tty"* ]]
  [[ "${data[3]}" = *"--env COLUMNS=`tput cols`"* ]]
  [[ "${data[3]}" = *"--env LINES=`tput lines`"* ]]
  [[ "${data[3]}" = *"--workdir /coast"* ]]
  [[ "${data[3]}" = *"$CONTAINER /bin/zsh"* ]]
  CONTAINER_EXISTS=0
}

@test "session from <image-name> :: builds the supplied image, creates a container with which it starts a session" {
  CONTAINER_RUNNING=1
  run coast session from foo-image
  readarray data < $DATA
  [ "$status" -eq 0 ]
  [[ "${lines[0]}" = "Starting a new session in $CONTAINER"* ]]
  [[ "${data[0]}" = *"images --quiet $IMAGE"* ]]
  [[ "${data[1]}" = *"build --tag $IMAGE -"* ]]
  [[ "${data[2]}" = *"ps --quiet --filter name=$CONTAINER --filter status=running"* ]]
  [[ "${data[3]}" = *"exec --interactive --tty"* ]]
  [[ "${data[3]}" = *"--env COLUMNS=`tput cols`"* ]]
  [[ "${data[3]}" = *"--env LINES=`tput lines`"* ]]
  [[ "${data[3]}" = *"--workdir /coast"* ]]
  [[ "${data[3]}" = *"$CONTAINER /bin/zsh"* ]]
  CONTAINER_RUNNING=0
}

@test "session from <image-name> :: will fail when an image already exists" {
  IMAGE_EXISTS=1
  run coast session from foo-image
  [ "$status" -eq 1 ]
  [[ "${lines[0]}" = "$IMAGE already exists, destroy it before trying to build FROM foo-image"* ]]
  IMAGE_EXISTS=0
}
